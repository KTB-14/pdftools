"""D√©finition des t√¢ches Celery consomm√©es par le worker."""

from celery import Celery, states
from celery.exceptions import Ignore
from app.services.ocr.ocr_service import OCRService
from app.config import config
from app.logger import logger

# =============================== CELERY TASKS ================================
# D√©clare la t√¢che asynchrone ``ocr_task`` ex√©cut√©e par le worker Celery.

# Instance Celery connect√©e √† Redis
celery_app = Celery(
    "ocr_tasks",
    broker=config.CELERY_BROKER_URL,
    backend=config.CELERY_RESULT_BACKEND,
)

@celery_app.task(bind=True, name="ocr_task", acks_late=True)
def ocr_task(self, job_id: str):
    """T√¢che asynchrone ex√©cutant OCRService sur un dossier de job."""
    logger.info(f"[{job_id}] ‚û§ T√¢che OCR lanc√©e")

    try:
        self.update_state(state="PROCESSING", meta="D√©marrage du traitement OCR")
        logger.info(f"[{job_id}] ‚û§ Traitement OCR en cours...")

        ocr = OCRService(job_id)
        ocr.process()

        logger.info(f"[{job_id}] ‚úÖ OCR termin√© avec succ√®s")
        return {"status": "done"}  

    except Exception as exc:
        logger.exception(f"[{job_id}] ‚ùå Erreur lors du traitement OCR : {exc}")
        self.update_state(state=states.FAILURE, meta=str(exc))
        raise Ignore()

    finally:
        logger.info(f"[{job_id}] üîö Fin de t√¢che OCR (avec ou sans succ√®s)")
 
